{
  "name": "consul-ng",
  "description": "Installs/Configures Hashicorp Consul",
  "long_description": "consul-ng Cookbook\n================\n\n[![Cookbook](http://img.shields.io/badge/cookbook-v0.2.0-green.svg)](https://github.com/vkhatri/chef-consul-ng)[![Build Status](https://travis-ci.org/vkhatri/chef-consul-ng.svg?branch=master)](https://travis-ci.org/vkhatri/chef-consul-ng)\n\nThis is a [Chef] cookbook to manage [Hashicorp Consul].\n\n\n>> For Production environment, always prefer the [most recent release](https://supermarket.chef.io/cookbooks/consul-ng).\n\n\n## Most Recent Release\n\n```\ncookbook 'consul-ng', '~> 0.2.0'\n```\n\n## From Git\n\n```\ncookbook 'consul-ng', github: 'vkhatri/chef-consul-ng'\n```\n\n## Repository\n\nhttps://github.com/vkhatri/chef-consul-ng\n\n\n## Supported OS\n\nThis cookbook was tested on Amazon & Ubuntu & Centos7 Linux & Windows2012R2 and expected to work on other RHEL platforms.\n\n\n## Recipes\n\n- `consul-ng::default` - default recipe (use it for run_list)\n\n- `consul-ng::user` - setup consul user/group\n\n- `consul-ng::install` - install consul\n\n- `consul-ng::install_windows` - install consul on windows\n\n- `consul-ng::config` - configure consul\n\n## Attribute Driven Recipes\n\nThere are a set of helper recipes that can be run to create various configuration items. These recipes are driven by an `Array` of `Hash` attributes. The keys of each hash match the attributes for the corresponding resource. Only required attributes must be defined in each hash, others may be omitted. If `node['consul']['notify_restart']` attribute is set to true, the consul service will be reloaded after changes are made.\n\n- `consul-ng::acls` - configure access control lists, defined in `node['consul']['acls'][]`\n\nConfiguring ACLs is dependent on whether your servers are setup to use them. ACLs can be quite complex so please refer to the Consul documentation for more information.\n\n- `consul-ng::checks` - configure health checks, defined in `node['consul']['checks'][]`\n\nThe following example creates two check definitions. The first calls a script created with the `consul_script` resource. The second is a simple http check against the local webserver.\n\n``` ruby\ndefault['consul']['checks'] = [\n    {\n        'name' => 'proxy_status',\n        'notes' => 'Check the status of the proxy host',\n        'script' => \"#{node['consul']['script_dir']}/consul_script_proxy_status\",\n        'interval' => '10s'\n    },\n    {\n        'name' => 'web_alive',\n        'http' => 'http://localhost:8080/health',\n        'interval' => '30s'\n    }\n]\n```\n\n- `consul-ng::scripts` - deploy health check scripts, defined in `node['consul']['scripts'][]`\n\nThe following example creates two health check scripts, `consul_script_proxy_status` and `consul_script_web_alive`. The first is a self contained script. This example is intended to demonstrate the `consul-ng::scripts` recipe attribute syntax, but a simple http GET request would be better defined as a `http` type check directly in consul rather than calling an external script. The second example is using a the `cookbook_file` type to deploy a script directly from a cookbook resource.\n\n``` ruby\ndefault['consul']['scripts'] = [\n    {\n        'name' => 'proxy_status',\n        'script_content' => 'curl -s http://localhost:80/health'\n    },\n    {\n        'name' => 'web_alive',\n        'cookbook' => 'consul-ng',\n        'cookbook_file' => 'web-alive.sh.erb'\n    }\n]\n```\n\n- `consul-ng::services` - configure services, defined in `node['consul']['services'][]`\n\nThe following example creates two service definition files, `100-service-web.json` and `100-service-proxy.json`.\n\n``` ruby\ndefault['consul']['services'] = [\n    {\n        'name' => 'proxy',\n        'port' => 80,\n        'address' => node['ipaddress']\n    },\n    {\n        'name' => 'web',\n        'port' => 8080,\n        'address' => node['ipaddress'],\n        'tags' => ['rails']\n    }\n]\n```\n\n- `consul-ng::watches` - configure watches, defined in `node['consul']['watches'][]`\n\n``` ruby\ndefault['consul']['watches'] = [\n    {\n        'name' => 'proxy',\n        'type' => 'key',\n        'key' => 'proxy',\n        'handler_type' => 'script',\n        'args' => ['/path/to/handler-script.sh', '-connect', 'redis']\n    },\n    {\n        'name' => 'web',\n        'type' => 'nodes',\n        'handler_type' => 'script',\n        'args' => ['/path/to/node-handler.sh']\n    }\n]\n```\n\n## Advanced Attributes\n\n\n* `default['consul']['version']` (default: `1.1.0`): consul version\n\n* `default['consul']['packages']` (default: `['unzip']`): package dependencies\n\n* `default['consul']['notify_restart']` (default: `true`): whether to restart consul service on configuration file change\n\n* `default['consul']['disable_service']` (default: `false`): whether to disable and stop consul service\n\n* `default['consul']['package_url']` (default: `auto`): download consul package file from hashicorp package repository\n\n* `default['consul']['webui_package_url']` (default: `auto`): download consul webui package file from hashicorp package repository, included in version 0.9.0+\n\n* `default['consul']['sha256sum_override']` (default: `nil`): override the sha256sum for the consul installation package\n\n* `default['consul']['setup_user']` (default: `true`): setup consul user / group\n\n* `default['consul']['enable_webui']` (default: `true`): enable consul webui\n\n* `default['consul']['enable_webui']` (default: `true`): enable consul webui\n\n* `default['consul']['diplomat_gem_version']` (default: `nil`): diplomat chef gem version\n\n* `default['consul']['install_diplomat_gem']` (default: `true`): install diplomat chef gem\n\n* `default['consul']['configure']` (default: `true`): configure consul\n\n* `default['consul']['install']` (default: `true`): install consul\n\n* `default['consul']['windows_drive_letter']` (default: `C:`): set installation drive for Windows systems\n\n\n## Core Attributes\n\n* `default['consul']['packages']` (default: `['unzip']`): package dependencies\n\n* `default['consul']['conf_dir']` (default: `/etc/consul`): consul configuration directory\n\n* `default['consul']['conf_file']` (default: `/etc/consul/000-consul.json`): consul configuration file\n\n* `default['consul']['parent_dir']` (default: `/usr/local/consul`): consul parent directory\n\n* `default['consul']['pid_dir']` (default: `/var/run/consul`): consul service pid directory\n\n* `default['consul']['log_dir']` (default: `/var/log/consul`): consul log directory\n\n* `default['consul']['mode']` (default: `0754`): default directory/file resources mode\n\n* `default['consul']['umask']` (default: `0023`): execute resource attribute\n\n* `default['consul']['user']` (default: `consul`): user name\n\n* `default['consul']['group']` (default: `consul`): group name\n\n* `default['consul']['version_purge']` (default: `false`): purge older versions under `node['consul']['parent_dir']`\n\n\n## Configuration File 001-consul.json Attributes\n\n* `default['consul']['config']['datacenter']` (default: `nil`): consul configuration attribute, need to **set** this attribute\n\n* `default['consul']['config']['encrypt']` (default: `nil`): consul configuration attribute, need to **set** this attribute\n\n* `default['consul']['config']['start_join']` (default: `[]`): consul configuration attribute, **set this attribute with consul servers ip address**\n\n* `default['consul']['config']['bootstrap']` (default: `false`): consul configuration attribute\n\n* `default['consul']['config']['server']` (default: `false`): consul configuration attribute\n\n* `default['consul']['config']['log_level']` (default: `INFO`): consul configuration attribute\n\n* `default['consul']['config']['bind_addr']` (default: `node['ipaddress']`): consul configuration attribute\n\n* `default['consul']['config']['client_addr']` (default: `node['ipaddress']`): consul configuration attribute\n\n* `default['consul']['config']['ports']['server']` (default: `8300`): consul port\n\n* `default['consul']['config']['ports']['serf_lan']` (default: `8301`): consul port\n\n* `default['consul']['config']['ports']['serf_wan']` (default: `8302`): consul port\n\n* `default['consul']['config']['ports']['rpc']` (default: `8400`): consul port, deprecated in version 0.8.0\n\n* `default['consul']['config']['ports']['dns']` (default: `8600`): consul port\n\n* `default['consul']['config']['ports']['http']` (default: `8500`): consul port\n\nFor more attribute info, visit below links:\n\n```\nhttp://www.consul.io/docs/agent/options.html\n```\n\n## Custom Resources\n\n### consul_acl\n\nThe *consul_acl* resource takes care of provisioning access control lists.\n\n#### Syntax\n\n****\n\n``` ruby\nconsul_acl 'web' do\n    type 'client'\n    rules {\n        \"node\" => {\n            \"\" => { \"policy\" => \"read\" },\n            \"app\" => { \"policy\" => \"write\" },\n            \"admin\" => { \"policy\" => \"deny\" }\n        }\n    }\n    token '61f3889e-581b-46b2-903c-667baabf0c45'\nend\n```\n\nThe full syntax for all of the properties that are available to the *consul_acl* resource is:\n\n``` ruby\nconsul_acl 'name' do\n    id String\n    url Array\n    acl String # defaults to resource block name\n    type String\n    rules String, Hash\n    token String # required\n    action Symbol # defaults to :create if not specified\nend\n```\n\n#### Actions\n\n****\n\nThis resource has the following actions:\n\n`:create`\n    Default. Create the access control list item.\n\n`:delete`\n    Delete the access control list item.\n\n`:nothing`\n    Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the Chef Client run.\n\n### consul_check\n\nThe *consul_check* resource takes care of provisioning health checks. These items can be found in `node['consul']['conf_dir']/101-check-<name>.json`.\n\n#### Syntax\n\n****\n\n``` ruby\nconsul_check 'mem-util' do\n    id 'mem-util'\n    args [\"/usr/local/bin/check_mem.py\", \"-limit\", \"256MB\"]\n    interval '30s'\n    timeout '1s'\nend\n```\n\nThe full syntax for all of the properties that are available to the *consul_check* resource is:\n\n``` ruby\nconsul_check 'name' do\n    id String\n    script String\n    args Array\n    http String\n    tcp String\n    docker_container_id String\n    shell String\n    timeout String\n    interval String\n    ttl String\n    service_id String\n    initial_status String\n    grpc String\n    grpc_use_tls [True, False]\n    action Symbol # defaults to :create if not specified\nend\n```\n\n#### Actions\n\n****\n\nThis resource has the following actions:\n\n`:create`\n    Default. Create the health check definition file. If a file already exists (but does not match), update that file to match.\n\n`:delete`\n    Delete the health check definition file.\n\n`:nothing`\n    Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the Chef Client run.\n\n### consul_script\n\nThe *consul_script* resource provisions a health check script. These items can be found in `node['consul']['scripts_dir']/consul_script_<name>`.\n\n#### Syntax\n\n****\n\n``` ruby\nconsul_script 'ping-test' do\n    script_content 'ping -c 1 -w 1 remotehost'\nend\n```\n\nThe full syntax for all of the properties that are available to the *consul_script* resource is:\n\n``` ruby\nconsul_script 'name' do\n    name String\n    script_content String\n    cookbook String # required if using cookbook_file or cookbook_template\n    cookbook_file String\n    cookbook_template String\n    template_variables Hash # variables passed into template resource\n    action Symbol # defaults to :create if not specified\nend\n```\n\n#### Actions\n\n****\n\nThis resource has the following actions:\n\n`:create`\n    Default. Create the service definition file. If a file already exists (but does not match), update that file to match.\n\n`:delete`\n    Delete the service configuration file.\n\n`:nothing`\n    Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the Chef Client run.\n\n### consul_service\n\nThe *consul_service* resource takes care of provisioning service configuration items. These items can be found in `node['consul']['conf_dir']/100-service-<name>.json`.\n\n#### Syntax\n\n****\n\n``` ruby\nconsul_service 'web' do\n    address node['ipaddress']\n    port 8080\nend\n```\n\nThe full syntax for all of the properties that are available to the *consul_service* resource is:\n\n``` ruby\nconsul_service 'name' do\n    id String\n    name String\n    tags Array\n    port Integer\n    address String\n    enable_tag_override True, False\n    checks Array\n    token String\n    action Symbol # defaults to :create if not specified\nend\n```\n\n#### Actions\n\n****\n\nThis resource has the following actions:\n\n`:create`\n    Default. Create the service definition file. If a file already exists (but does not match), update that file to match.\n\n`:delete`\n    Delete the service configuration file.\n\n`:nothing`\n    Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the Chef Client run.\n\n### consul_watch\n\nThe *consul_watch* resource takes care of provisioning consul watches.\n\n#### Syntax\n\n****\n\n``` ruby\nconsul_watch 'web' do\n    type 'key'\n    key 'web/nodes/server1'\n    handler_type 'script'\n    args ['/path/to/handler-script.sh']\nend\n```\n\nThe full syntax for all of the properties that are available to the *consul_watch* resource is:\n\n``` ruby\nconsul_watch 'name' do\n    type String\n    prefix String\n    key String\n    args Array\n    handler_type String\n    handler String # deprecated in favor of handler_type with args\n    http_handler_config Hash\n    datacenter String\n    token String\n    action Symbol # defaults to :create if not specified\nend\n```\n\n#### Actions\n\n****\n\nThis resource has the following actions:\n\n`:create`\n    Default. Create the watch item.\n\n`:delete`\n    Delete the watch item.\n\n`:nothing`\n    Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the Chef Client run.\n\n## Contributing\n\n1. Fork the repository on Github\n2. Create a named feature branch (like `add_component_x`)\n3. Write your change\n4. Write tests for your change (if applicable)\n5. Run the tests (`rake & rake knife`), ensuring they all pass\n6. Write new resource/attribute description to `README.md`\n7. Write description about changes to PR\n8. Submit a Pull Request using Github\n\n## Copyright & License\n\nAuthors:: Virender Khatri and [Contributors]\nAuthors:: Joshua Colson\n\n<pre>\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</pre>\n\n\n[Chef]: https://www.chef.io/\n[consul]: https://consul.io/\n[Contributors]: https://github.com/vkhatri/chef-consul/graphs/contributors\n",
  "maintainer": "Virender Khatri",
  "maintainer_email": "vir.khatri@gmail.com",
  "license": "Apache-2.0",
  "platforms": {
    "ubuntu": ">= 0.0.0",
    "centos": ">= 0.0.0",
    "amazon": ">= 0.0.0",
    "redhat": ">= 0.0.0",
    "fedora": ">= 0.0.0",
    "windows": ">= 0.0.0"
  },
  "dependencies": {
    "nssm": "~> 4.0.0"
  },
  "providing": {

  },
  "attributes": {

  },
  "recipes": {

  },
  "version": "0.2.0",
  "source_url": "https://github.com/vkhatri/chef-consul-ng",
  "issues_url": "https://github.com/vkhatri/chef-consul-ng/issues",
  "privacy": false,
  "chef_versions": [
    [
      ">= 12.5"
    ]
  ],
  "ohai_versions": [

  ],
  "gems": [

  ]
}
